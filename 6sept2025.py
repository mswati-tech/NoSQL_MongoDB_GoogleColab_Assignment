# -*- coding: utf-8 -*-
"""6Sept2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1diAo3BexjgLx2UYIP7xWR_y-D_8Gi8yc
"""

!pip install "pymongo[srv]==3.12"

import json
from pymongo import MongoClient

# Connecting to MongoDB Atlas
uri = "mongodb+srv://<uername>:<password>@cluster0.cqgaaie.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"
client = MongoClient(uri, tlsAllowInvalidCertificates=True)

# TASK 1: CREATE YOUR OWN DATASET

 # 1. Create a database named StudentDB
db = client['StudentDB']

# 2. Inside it, create a collection named students
collection = db['Students']

# 3. Design your own dataset with at least 15 student records

#Inserting dataset (only if empty, to prevent duplicates)
if collection.count_documents({}) == 0:
    collection.insert_many(
        [
            {"studentID": 1, "name": "Amit Sharma", "course": "Computer Science", "marks": 82, "city": "Delhi", "email": "amit.sharma@example.com"},
            {"studentID": 2, "name": "Priya Verma", "course": "Mathematics", "marks": 91, "city": "Mumbai", "email": "priya.verma@example.com"},
            {"studentID": 3, "name": "Rohit Kumar", "course": "Physics", "marks": 76, "city": "Bangalore", "email": "rohit.kumar@example.com"},
            {"studentID": 4, "name": "Neha Singh", "course": "Chemistry", "marks": 65, "city": "Lucknow", "email": "neha.singh@example.com"},
            {"studentID": 5, "name": "Karan Patel", "course": "Computer Science", "marks": 58, "city": "Ahmedabad", "email": "karan.patel@example.com"},
            {"studentID": 6, "name": "Simran Kaur", "course": "Biology", "marks": 88, "city": "Chandigarh", "email": "simran.kaur@example.com"},
            {"studentID": 7, "name": "Aditya Mehra", "course": "Mathematics", "marks": 72, "city": "Delhi", "email": "aditya.mehra@example.com"},
            {"studentID": 8, "name": "Sneha Reddy", "course": "Computer Science", "marks": 95, "city": "Hyderabad", "email": "sneha.reddy@example.com"},
            {"studentID": 9, "name": "Arjun Nair", "course": "Physics", "marks": 43, "city": "Kochi", "email": "arjun.nair@example.com"},
            {"studentID": 10, "name": "Isha Gupta", "course": "Chemistry", "marks": 39, "city": "Jaipur", "email": "isha.gupta@example.com"},
            {"studentID": 11, "name": "Rahul Das", "course": "Biology", "marks": 60, "city": "Kolkata", "email": "rahul.das@example.com"},
            {"studentID": 12, "name": "Meena Joshi", "course": "Mathematics", "marks": 84, "city": "Pune", "email": "meena.joshi@example.com"},
            {"studentID": 13, "name": "Deepak Yadav", "course": "Physics", "marks": 78, "city": "Delhi", "email": "deepak.yadav@example.com"},
            {"studentID": 14, "name": "Anjali Rao", "course": "Computer Science", "marks": 55, "city": "Bangalore", "email": "anjali.rao@example.com"},
            {"studentID": 15, "name": "Vikram Singh", "course": "Chemistry", "marks": 92, "city": "Lucknow", "email": "vikram.singh@example.com"}
        ]
    )
    print("Inserted 15 students into collection.")
else:
    print("Dataset already exists. Skipping insert.")

# TASK 2: BASIC QUERIES

# 1. Display all student records
print("\nAll student records:")
for student in collection.find():
    print(student)

# 2. Find all students enrolled in specific course of your choice; so I choose "Computer Science"
print("\nStudents enrolled in Computer Science:")
for student in collection.find({"course": "Computer Science"}):
    print(student)

# 3. Find students with marks greater than 75
print("\nStudents with marks > 75:")
for student in collection.find({"marks": {"$gt": 75}}):
    print(student)

# 4. Retrieve students from your chosen city
print("\nStudents from Delhi:")
for student in collection.find({"city": "Delhi"}):
    print(student)

# TASK 3: UPDATE & DELETE OPERATIONS

# 1. Update the email of one student
collection.update_one({"email":"amit.sharma@example.com"},{"$set":{"email":"amit547.sharma@example.com"}})
print("\nUpdated student email:")
for student in collection.find({"email":"amit547.sharma@example.com"}):
    print(student)

# 2. Increase marks by 10 for all students in one particular course
collection.update_many({"course": "Computer Science"}, {"$inc": {"marks": 10}})
print("\nIncreased marks for students in Computer Science:")
for student in collection.find({"course": "Computer Science"}):
    print(student)

# 3. Delete all students with marks below 40
collection.delete_many({"marks": {"$lt": 40}})
print("\nDeleted students with marks < 40:")
for student in collection.find():
    print(student)

# TASK 4: AGGREGATION & ANALYSIS

# 1. Count how many students are there in each course
print("\nCount of students in each course:")
for result in collection.aggregate([
    {"$group": {"_id": "$course", "count": {"$sum": 1}}}
]):
    print(result)

# 2. Find the average marks per course
print("\nAverage marks per course:")
for result in collection.aggregate([
    {"$group": {"_id": "$course", "average_marks": {"$avg": "$marks"}}},  # Average marks have many digits after the decimal
    {"$project": {"average_marks": {"$round": ["$average_marks", 1]}}}  # Limiting it to one digit after the decimal
]):
    print(result)

# 3. Display the top 3 students with the highest marks
print("\nTop 3 students with highest marks:")
for result in collection.find().sort("marks", -1).limit(3):
    print(result)

# 4. Sort students by marks in descending order
print("\nStudents sorted by marks in descending order:")
for student in collection.find().sort("marks", -1):
    print(student)

# TASK 5: EXPORT & REPORT

# 1. Export your custom dataset (students collection) into a JSON file
students_list = list(collection.find({}, {"_id":0}))  # Excluding ObjectIds for a clean JSON
with open("students.json", "w") as file:  # Opening the JSON file
    json.dump(students_list, file, indent=4)  # Writing into JSON file

print("\nData exported to the JSON file")
